// –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
const bgMusic = document.getElementById("bg-music");
const audioPlayer = document.getElementById("audioPlayer");
const playPauseBtn = document.getElementById("playPauseBtn");
const prevBtn = document.getElementById("prevBtn");
const nextBtn = document.getElementById("nextBtn");
const musicTitle = document.querySelector(".music-title");
const musicCover = document.querySelector(".music-cover");

// –¢—Ä–µ–∫–∏
// –ê—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
const bgMusic = document.getElementById("bg-music");
const audioPlayer = document.getElementById("audioPlayer");
const playPauseBtn = document.getElementById("playPauseBtn");
const prevBtn = document.getElementById("prevBtn");
const nextBtn = document.getElementById("nextBtn");
const musicTitle = document.querySelector(".music-title");
const musicCover = document.querySelector(".music-cover");

// –¢—Ä–µ–∫–∏
const tracks = [
  { title: "The Way I See Things", src: "./tracks/01 the way u see things.mp3", cover: "./default_cover.png" },
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ ...
].map(track => ({
  ...track,
  src: encodeURI(track.src) // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
}));

let currentTrack = 0;
let isPlaying = false;
let audioInitialized = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
function initAudio() {
  if (audioInitialized) return;
  
  audioPlayer.preload = "auto";
  bgMusic.preload = "none";
  bgMusic.loop = true;
  
  audioPlayer.addEventListener('error', handleAudioError);
  bgMusic.addEventListener('error', handleAudioError);
  
  audioInitialized = true;
  loadTrack(currentTrack);
}

function handleAudioError(e) {
  console.error("Audio error:", e.target.error);
  if (e.target === audioPlayer) {
    musicTitle.textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞";
    setTimeout(playNextTrack, 2000);
  }
}

async function loadTrack(index) {
  const track = tracks[index];
  console.log("Loading:", track.src);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const response = await fetch(track.src);
    if (!response.ok) throw new Error("Track not available");
    
    audioPlayer.src = track.src;
    musicTitle.textContent = track.title;
    musicCover.src = track.cover;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    try {
      const tags = await new Promise((resolve, reject) => {
        jsmediatags.read(track.src, {
          onSuccess: resolve,
          onError: reject
        });
      });
      
      if (tags.tags) {
        const { title, artist, picture } = tags.tags;
        if (title) musicTitle.textContent = title;
        if (artist) musicTitle.textContent += ` - ${artist}`;
        if (picture) {
          const base64 = btoa(String.fromCharCode(...picture.data));
          musicCover.src = `data:${picture.format};base64,${base64}`;
        }
      }
    } catch (metaError) {
      console.log("Metadata error:", metaError);
    }
    
    if (isPlaying) {
      await audioPlayer.play().catch(console.error);
    }
  } catch (error) {
    console.error("Load failed:", error);
    playNextTrack();
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
async function togglePlayback() {
  if (isPlaying) {
    audioPlayer.pause();
    isPlaying = false;
    playPauseBtn.textContent = "‚ñ∂Ô∏è";
  } else {
    try {
      await audioPlayer.play();
      isPlaying = true;
      playPauseBtn.textContent = "‚è∏";
      bgMusic.pause();
    } catch (error) {
      console.error("Playback failed:", error);
      showAudioActivationPrompt();
    }
  }
}

function showAudioActivationPrompt() {
  const prompt = document.createElement('div');
  prompt.className = 'audio-prompt';
  prompt.innerHTML = `
    <p>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ</p>
    <button id="activate-audio">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
  `;
  document.body.appendChild(prompt);
  
  document.getElementById('activate-audio').addEventListener('click', async () => {
    await audioPlayer.play();
    prompt.remove();
  });
}

function playNextTrack() {
  currentTrack = (currentTrack + 1) % tracks.length;
  loadTrack(currentTrack);
  if (isPlaying) audioPlayer.play().catch(console.error);
}

function playPrevTrack() {
  currentTrack = (currentTrack - 1 + tracks.length) % tracks.length;
  loadTrack(currentTrack);
  if (isPlaying) audioPlayer.play().catch(console.error);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  initAudio();
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ
  const unlock = () => {
    bgMusic.volume = 0;
    bgMusic.play()
      .then(() => bgMusic.pause())
      .catch(console.log)
      .finally(() => bgMusic.volume = 1);
  };
  
  document.addEventListener('click', unlock, { once: true });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
playPauseBtn.addEventListener("click", togglePlayback);
prevBtn.addEventListener("click", playPrevTrack);
nextBtn.addEventListener("click", playNextTrack);
audioPlayer.addEventListener('ended', playNextTrack);
// –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ... (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)
// --- –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª ---
document.getElementById("openBtn").addEventListener("click", () => {
  vibrate();
  document.getElementById("main-buttons").classList.add("hidden");
  document.getElementById("mainMessage").classList.add("show");
  document.getElementById("backBtn").classList.remove("hidden");

  const messageParagraph = document.querySelector("#mainMessage p");
  const fullText = `–î–æ—Ä–æ–≥–∞—è –ê–ª–∏—Å–∞!<br><br>
–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è, —Å–æ–ª–Ω—Ü–µ ‚òÄÔ∏è<br>
–ü—É—Å—Ç—å –≤ –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å–≤–µ—Ç–∞, —Ç–µ–ø–ª–∞, –ª—é–±–≤–∏ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞.<br>
–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —è—Ä—á–µ, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∞—è—Å—å —Å–æ–±–æ–π.<br>
–Ø –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å.<br><br>
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∞–π –º–µ—á—Ç–∞—Ç—å ‚Äî —Ç—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æüíó<br><br>
–° –ª—é–±–æ–≤—å—é –∏ —Å–∞–º—ã–º–∏ —Ç—ë–ø–ª—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ üí´<br><br>`;
  typeWriter(messageParagraph, fullText, 50);
  playBgMusic();
});

// --- –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ ---
document.getElementById("check-secret").addEventListener("click", () => {
  vibrate();
  const value = document.getElementById("secret-input").value.trim().toLowerCase();
  const div = document.getElementById("secret-message");

  document.getElementById("main-buttons").classList.add("hidden");
  div.style.display = 'block';
  document.getElementById("backBtn").classList.remove("hidden");

  if (value === "—á—É–¥–æ" || value === "—Ç—ã –º–æ—ë —á—É–¥–æ") {
    div.innerHTML = "üéâ –¢—ã –≤–≤–µ–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ: —Ç—ã –º–æ—ë —á—É–¥–æ! üíñ";
  } else {
    div.innerHTML = "üòÖ –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!";
  }
});

// --- –ö–Ω–æ–ø–∫–∞ ¬´–ú—É–∑—ã–∫–∞¬ª ---
document.getElementById("musicBtn").addEventListener("click", () => {
  vibrate();
  document.getElementById("main-buttons").classList.add("hidden");
  document.getElementById("musicPlayer").classList.remove("hidden");
  document.getElementById("backBtn").classList.remove("hidden");
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ play/pause
  playPauseBtn.textContent = isPlaying ? "‚è∏" : "‚ñ∂Ô∏è";
});

// --- –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
document.getElementById("backBtn").addEventListener("click", () => {
  vibrate();
  document.getElementById("main-buttons").classList.remove("hidden");
  document.getElementById("mainMessage").classList.remove("show");
  document.getElementById("secret-message").style.display = "none";
  document.getElementById("musicPlayer").classList.add("hidden");
  document.getElementById("backBtn").classList.add("hidden");
  
  pauseCurrentTrack();
  stopBgMusic();
});

// --- –ü–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–æ –±—É–∫–≤–∞–º ---
function typeWriter(element, text, speed) {
  let i = 0;
  element.innerHTML = "";
  const fullText = text.replace(/<br>/g, '\n');

  function type() {
    if (i < fullText.length) {
      element.innerHTML += (fullText.charAt(i) === '\n' ? '<br>' : fullText.charAt(i));
      i++;
      setTimeout(type, speed);
    }
  }
  type();
}